# Alias example
alias documents="cd ~/Documents"
documents # Changes to Documents directory

# Source example
source ~/.bashrc # Reloads bash config

# Export example
export API_KEY="123abc" 
python script.py # script.py can access $API_KEY


#!/bin/bash

# Function to generate SSH key pair
generate_ssh_keys() {
    ssh-keygen -t rsa -b 4096 -C "your_email@domain.com"  
}

# Function to connect to instance and run command  
ssh_remote_command() {
    ssh -i /path/to/private_key.pem username@server_ip_or_dns uptime
}

# Function to securely copy file to instance
scp_file() {
    scp -i /path/to/private_key.pem /local/file.txt username@server:/remote/destination
}

# Function to forward remote port to local port
ssh_port_forward() {
    ssh -L 8888:remote_server:80 username@server_ip_or_dns
}

# Function to check SSH connection issues
debug_ssh() {
    # Check security group rules, NACLs, keys etc  
}

# Generate public/private SSH key pair
ssh-keygen -t rsa -b 4096 -C "myemail@example.com"  

# Print the generated public key 
cat ~/.ssh/id_rsa.pub

# Clone a GitHub repo via SSH 
git clone git@github.com:user/repo.git

# Port forward remote port 8080 to local port 8080
ssh -L 8080:localhost:8080 user@remotehost


## Create SSH Keys

* Step 1: 

```
ssh-keygen -t rsa
```


* Step 2:

`cat /home/ec2-user/.ssh/id_rsa.pub`

* Step 3:

Copy to Github

* Step 4:

Clone repo

## SSH into Cloud9

1.  Open port 22 to 0.0.0.0
2.  Paste local `id_rsa.pub`
3.  `ssh -v ec2-user@<ipaddress>`

### Port forwarding remote server

1.  Create connection
```
ssh -N -L 8080:127.0.0.1:8080 ec2-user@<ipaddress>
```
2.  Launch the remote server:  `python app.py`
3.  open web browser on OS X laptop

## References

* [Setup SSH Keys Github Docs](https://docs.github.com/en/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account)

